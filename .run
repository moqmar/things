env:
  ERRORMAIL: backup-status@example.org

new Creates a new project: '[ $# -ne 1 ] && echo "Usage: run new <project>" || { cp -R .template "$1" && cd "$1" && git init; }'

all Starts all projects: for i in */; do run -c "$i"; done

# Add this to crontab for automated backups:
# 0 0 * * * /usr/local/bin/run -c /var/things backup >/dev/null 2>&1
backup Create backups of all projects: |
  PATH=/bin:/usr/bin:/usr/local/bin
  status=0
  echo -n > /tmp/things-backup.log
  for i in */; do
    run -c "$i" backup >> /tmp/things-backup.log 2>&1 || status=$((status+1))
  done
  if [ $status -ne 0 ]; then
    link=`curl -sT /tmp/things-backup.log https://qbin.io | grep '^https://qbin.io/' 2>&1`
    [ -n "$link" ] && \
    echo "Backup failed on `cat /etc/hostname`, $status things affected. More information here: $link" | mail -s "Backup failed" $ERRORMAIL || \
    echo "Backup failed on `cat /etc/hostname`, $status things affected. Full log:\n`cat /tmp/things-backup.log`" | mail -s "Backup failed" $ERRORMAIL
  fi

update Pull the latest version of all images used in projects: |
  # Images from docker-compose.yml that are build locally
  for i in */docker-compose.yml; do
    python -c "import yaml, json, sys; print(json.dumps(yaml.load(open(sys.argv[1], 'r'))))" "$i" |
    jq -r '.services | map(if .image and .build then .image else null end) | del(.[] | nulls)' |
    sed -re 's/^\[$|^\]$|,$|^\s+|//g' -e 's/^"|"$//g' -e '/^$/d' |
    grep -vxFe '[]';
  done > /tmp/locally-built-images.txt
  
  # All images used in docker-compose.yml that are not built locally
  online_images=`grep -Poh '^\s+image: \K.*' */docker-compose.yml | sort | uniq | grep -vxFf /tmp/locally-built-images.txt`
  
  # Pull docker images and recreate everything that's changed
  docker pull $online_images
  run all
